#pragma once

#include <GpCore2/GpUtils/Types/Numerics/GpNumericTypes.hpp>
#include <GpCore2/GpUtils/Types/Containers/GpBytesArray.hpp>
#include <GpCore2/Config/IncludeExt/boost_flat_map.hpp>

#include <variant>

namespace GPlatform::PSQL {

// https://www.postgresql.org/docs/current/protocol-overview.html
// https://www.postgresql.org/docs/current/protocol-message-formats.html

enum class MessageRqDescId: u_int_8
{
    NO_MESSAGE              = 0,
    STARTUP_MESSAGE         = 255,
    PASSWORD_MESSAGE        = 'p',
    QUERY                   = 'Q',
    TERMINATE               = 'X',
    PARSE                   = 'P',
    BIND                    = 'B',
    EXECUTE                 = 'E',
    CLOSE                   = 'C',
    FLUSH                   = 'H',
    SYNC                    = 'S',
    FUNCTION_CALL           = 'F',
    COPY_DATA               = 'd',
    COPY_DONE               = 'c',
    COPY_FAIL               = 'f'
};

enum class MessageRsDescId
{
    AUTHENTICATION_REQUEST  = 'R',
    BACKEND_KEY_DATA        = 'K',
    BIND_COMPLETE           = '2',
    CLOSE_COMPLETE          = '3',
    COMMAND_COMPLETE        = 'C',
    COPY_IN_RESPONSE        = 'G',
    COPY_OUT_RESPONSE       = 'H',
    DATA_ROW                = 'D',
    ERROR_RESPONSE          = 'E',
    FUNCTION_CALL_RESPONSE  = 'V',
    NO_DATA                 = 'n',
    NOTICE_RESPONSE         = 'N',
    NOTIFICATION_RESPONSE   = 'A',
    PARAMETER_DESCRIPTION   = 't',
    PARAMETER_STATUS        = 'S',
    PARSE_COMPLETE          = '1',
    PORTAL_SUSPENDED        = 's',
    READY_FOR_QUERY         = 'Z',
    ROW_DESCRIPTION         = 'T'
};

enum class AuthenticationMethod
{
    AUTH_OK             = 0,
    KERBEROS_V5         = 2,
    CLEAR_TEXT_PASSWORD = 3,
    MD5_PASSWORD        = 5,
    GSS                 = 7,
    SSPI                = 9,
    SASL                = 10,
    SASL_CONTINUE       = 11,
    SASL_FINAL          = 12
};

enum class ErrorCodeId
{
    SEVERITY_1              = 'S',  // 'Severity': The field contents are ERROR, FATAL, or PANIC (in an error message), or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message),
                                    // or a localized translation of one of these. Always present.
    SEVERITY_2              = 'V',  // 'Severity': The field contents are ERROR, FATAL, or PANIC (in an error message), or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message). T
                                    // his is identical to the S field except that the contents are never localized. This is present only in messages generated by
                                    // PostgreSQL versions 9.6 and later.
    SQLSTATE_CODE           = 'C',  // 'Code': The SQLSTATE code for the error (see Appendix A). Not localizable. Always present.
    MESSAGE                 = 'M',  // 'Message': The primary human-readable error message. This should be accurate but terse (typically one line). Always present.
    DETAIL                  = 'D',  // 'Detail': An optional secondary error message carrying more detail about the problem. Might run to multiple lines.
    HINT                    = 'H',  // 'Hint': An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. Might run to multiple lines.
    POSITION                = 'P',  // 'Position': The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string.
                                    // The first character has index 1, and positions are measured in characters not bytes.
    INTERNAL_POSITION       = 'p',  // 'Internal position': This is defined the same as the P field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client.
                                    // The q field will always appear when this field appears.
    INTERNAL_QUERY          = 'q',  // 'Internal query': The text of a failed internally-generated command. This could be, for example, an SQL query issued by a PL/pgSQL function.
    WHERE                   = 'W',  // 'Where': An indication of the context in which the error occurred. Presently this includes a call stack traceback of active
                                    // procedural language functions and internally-generated queries. The trace is one entry per line, most recent first.
    SCHEMA_NAME             = 's',  // 'Schema name': if the error was associated with a specific database object, the name of the schema containing that object, if any.
    TABLE_NAME              = 't',  // 'Table name': if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.)
    COLUMN_NAME             = 'c',  // 'Column name': if the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.)
    DATA_TYPE_NAME          = 'd',  // 'Data type name': Data type name: if the error was associated with a specific data type, the name of the data type.
                                    // (Refer to the schema name field for the name of the data type's schema.)
    CONSTRAINT_NAME         = 'n',  // 'Constraint name': if the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain.
                                    // (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.)
    FILE                    = 'F',  // 'File': the file name of the source-code location where the error was reported.
    LINE                    = 'L',  // 'Line': the line number of the source-code location where the error was reported.
    ROUTINE                 = 'R'   // 'Routine': the name of the source-code routine reporting the error.
};

// -------------------------------- RQ messages --------------------------------

struct StartupMessageDescRQ
{
    using AttributesMapT = boost::container::small_flat_map<std::string, std::string, 8>;

    // For historical reasons, the very first message sent by the client (the startup message) has no initial message-type byte.
    MessageRqDescId message_id  = PSQL::MessageRqDescId::STARTUP_MESSAGE;
    //u_int_32      length;              // Total length of the message (no need here, caclulated in ProtocolSerializer)
    u_int_32        protocol_version;    // Protocol version number
    AttributesMapT  attributes;          // Series of null-terminated key-value pairs
};

struct SASLInitialResponseDescRQ
{
    MessageRqDescId message_id  = MessageRqDescId::PASSWORD_MESSAGE;
    //u_int_32      length;                 // Total length of the message (no need here, caclulated in ProtocolSerializer)
    std::string     name;                   // Name of the SASL authentication mechanism that the client selected.
    std::string     client_first_message;   // SASL mechanism specific "Initial Response". (u_int_32 length + payload)
};

struct SASLResponseDescRQ
{
    MessageRqDescId message_id  = MessageRqDescId::PASSWORD_MESSAGE;
    //u_int_32      length;                 // Total length of the message (no need here, caclulated in ProtocolSerializer)
    std::string     client_final_message;   // SASL mechanism specific (only payload bytes without size)
};

// -------------------------------- RS messages --------------------------------
// The server then immediately closes the connection.
struct ErrorResponseDescRS
{
    using MessagesT = std::vector<std::tuple<ErrorCodeId, std::string_view>>;

    u_int_32        length = 0;

    // The message body consists of one or more identified fields, followed by a zero byte as a terminator. Fields can appear in any order.
    // For each field there is the following:
    // 1. Byte1: A code identifying the field type; if zero, this is the message terminator and no string follows.
    //           The presently defined field types are listed in Section 55.8. Since more field types might be added in future,
    //           frontends should silently ignore fields of unrecognized type.
    // 2. String: The field value.
    MessagesT       messages;
};

struct AuthenticationDescRS
{
    struct AuthenticationOk
    {
        // Empty
    };

    struct AuthenticationSASL
    {
        std::vector<std::string> names;     // Name of a SASL authentication mechanism. (null terminated strings)
    };

    struct AuthenticationSASLContinue
    {
        std::string server_first_message;   // SASL mechanism specific (only payload bytes without size)
    };

    struct AuthenticationSASLFinal
    {
        std::string server_final_message;   // SASL mechanism specific (only payload bytes without size)
    };

    using PayloadT = std::variant
    <
        AuthenticationOk,
        AuthenticationSASL,
        AuthenticationSASLContinue,
        AuthenticationSASLFinal
    >;

    u_int_32                length = 0;     // Total length of the message
    AuthenticationMethod    auth_method;    // Type of authentication required
    PayloadT                payload;
};

}// namespace GPlatform::PSQL
